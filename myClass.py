# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'myclass.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait as wait
from selenium.webdriver.common.by import By
from os import path
from selenium import webdriver
from selenium.webdriver.support.ui import Select
import datetime
from time import sleep

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSlot
from PyQt5.QtCore import QRegExp
from PyQt5.QtGui import QRegExpValidator
from PyQt5.QtWidgets import QMessageBox



class Ui_LpumyClass(object):
    def setupUi(self, LpumyClass):
        LpumyClass.setObjectName("LpumyClass")
        LpumyClass.resize(730, 467)
        #for Icon
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("bin/src/lpulogo.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        LpumyClass.setWindowIcon(icon)
        
        self.centralwidget = QtWidgets.QWidget(LpumyClass)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setSizeIncrement(QtCore.QSize(400, 600))
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.passwordInput = QtWidgets.QLineEdit(self.centralwidget)
        self.passwordInput.setObjectName("passwordInput")
        self.passwordInput.setEchoMode(QtWidgets.QLineEdit.Password) 
        self.gridLayout.addWidget(self.passwordInput, 4, 0, 1, 1)
        self.submit = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.submit.setFont(font)
        self.submit.setObjectName("submit")
        self.gridLayout.addWidget(self.submit, 7, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem1, 6, 0, 1, 1)
        self.passwordLabel = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.passwordLabel.setFont(font)
        self.passwordLabel.setObjectName("passwordLabel")
        self.gridLayout.addWidget(self.passwordLabel, 3, 0, 1, 1, QtCore.Qt.AlignHCenter)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem2, 0, 0, 1, 1)
        self.registrationLabel = QtWidgets.QLabel(self.centralwidget)
        self.registrationLabel.setEnabled(True)
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.registrationLabel.setFont(font)
        self.registrationLabel.setObjectName("registrationLabel")
        self.gridLayout.addWidget(self.registrationLabel, 1, 0, 1, 1, QtCore.Qt.AlignHCenter)
        self.registrationInput = QtWidgets.QLineEdit(self.centralwidget)

        reg_ex = QRegExp("[0-9]+.?[0-9]{,2}")
        input_validator = QRegExpValidator(reg_ex, self.registrationInput)
        self.registrationInput.setValidator(input_validator)
        
        
        self.registrationInput.setObjectName("registrationInput")
        self.gridLayout.addWidget(self.registrationInput, 2, 0, 1, 1)
        self.savedPassword = QtWidgets.QCheckBox(self.centralwidget)
        self.savedPassword.setObjectName("savedPassword")
        font1 = QtGui.QFont()
        font1.setPointSize(10)
        font1.setBold(True)
        font1.setWeight(75)
        self.savedPassword.setFont(font1)
        self.gridLayout.addWidget(self.savedPassword, 5, 0, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem3, 8, 0, 1, 1)
        self.horizontalLayout.addLayout(self.gridLayout)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem4)
        LpumyClass.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(LpumyClass)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 730, 21))
        self.menubar.setObjectName("menubar")
        self.aboutMain = QtWidgets.QMenu(self.menubar)
        self.aboutMain.setObjectName("aboutMain")
        LpumyClass.setMenuBar(self.menubar)
        self.actionHelp = QtWidgets.QAction(LpumyClass)
        self.actionHelp.setObjectName("actionHelp")
        self.actionDeveloper = QtWidgets.QAction(LpumyClass)
        self.actionDeveloper.setObjectName("actionDeveloper")
        self.aboutMain.addSeparator()
        self.aboutMain.addAction(self.actionHelp)
        self.aboutMain.addAction(self.actionDeveloper)
        self.menubar.addAction(self.aboutMain.menuAction())

        self.retranslateUi(LpumyClass)
        QtCore.QMetaObject.connectSlotsByName(LpumyClass)

    

    def retranslateUi(self, LpumyClass):
        _translate = QtCore.QCoreApplication.translate
        LpumyClass.setWindowTitle(_translate("LpumyClass", "LpuMyClass"))
        self.submit.setText(_translate("LpumyClass", "Submit"))
        self.passwordLabel.setText(_translate("LpumyClass", "Password"))
        self.registrationLabel.setText(_translate("LpumyClass", "Registration No."))
        self.savedPassword.setText(_translate("LpumyClass", "Proceed With Saved Password"))
        self.aboutMain.setTitle(_translate("LpumyClass", "About"))
        self.actionHelp.setText(_translate("LpumyClass", "Help"))
        self.actionDeveloper.setText(_translate("LpumyClass", "Developer"))

class AppWindow(QtWidgets.QMainWindow, Ui_LpumyClass):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.show()
        self.submit.clicked.connect(self.getCredentials)
        
    @pyqtSlot()
    def getCredentials(self):
        self.reg = self.registrationInput.text()
        self.pas = self.passwordInput.text()
        
        self.validateCredentials()
        #Configure database to save password
        
        if self.savedPassword.isChecked():
            print("checked")
            self.startAutomate()
        else:
            print("unchecked")

    def validateCredentials(self):
        if str(self.reg) == '':
            QMessageBox.warning(self, 'popup', 'Please Enter Registration No.') #s, QMessageBox.Ok | QMessageBox.Cancel)
        elif str(self.pas) == '':
            QMessageBox.warning(self, 'popup', 'Please Enter Password')
            
    def startAutomate(self):
        try:
            driver = webdriver.Chrome(executable_path="./bin/src/chromedriver")
            try:
                driver.get("https://myclass.lpu.in")
                driver.find_element_by_name("i").send_keys(self.reg)
                password = driver.find_element_by_name("p").send_keys(self.pas);
                driver.find_element_by_tag_name("button").click()
                driver.find_element_by_link_text("View Classes/Meetings").click()
                #driver.find_element_by_class_name("fc-icon-chevron-right").click()
                wait(driver, 5).until(EC.element_to_be_clickable((By.XPATH, "//span[text()='10:59']"))).click()
                driver.find_element_by_link_text("Join").click()
                wait(driver, 5).until(EC.element_to_be_clickable((By.XPATH, "//span[text()='Listen only']"))).click()
            except Exception as e:
                print(e)
        except Exception:
            QMessageBox.warning(self, 'popup', 'Chromedriver is not found!')
        
        
        
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    w = AppWindow()
    w.show()
    sys.exit(app.exec_())
